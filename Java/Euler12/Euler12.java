/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
*/

import java.util.ArrayList;
import java.math.BigDecimal;

public class Euler12
{
   static double a = 0;
   static double b = 1;
   static double c;
   static ArrayList <Double> multiples = new ArrayList<Double>();
   static ArrayList <Double> triangles = new ArrayList<Double>();
   static double multiple;
   
   public static void main(String [] args)
   {  
      long startTime = System.nanoTime();
      loop: while(true)
       {
         c = a+b;
         a = c;
         b++;
         triangles.add(c);
         
         //equal numbers have more divisors than unequal numbers around the same size
         //therefore we only check for equal numbers
         if(c%2==0)
         {         
            if(factors(c))
            {
               System.out.println("The result is: "+new BigDecimal(c).toPlainString());//burde printe 28, hvis triangles.size er 6
               System.out.println("The result has the following divisors: "+multiples.toString());
               System.out.println("All triangle numbers up to the result: "+triangles.toString());
               long endTime = System.nanoTime();
               long duration = endTime - startTime;
               System.out.println("Everything took: "+(double)duration / 1000000000.0+" seconds");
               
               break loop;
            }
         }
      }
   }

    public static boolean factors(double c)
    {
      //a local arrayList to contain the multiples
      multiples = new ArrayList<Double>();
      
      for(double i = 1;  i <= c/i; i++)
      {
         //first step in checking whether i is a divisor of c
         double mod = c%i;
                     
         //second step in checking whether i is a divisor of c
         if (mod == 0)
         {
         //if so, then
            multiples.add(c/i);//the result of the division added
            multiples.add(i);//the divisor added
            if(multiples.size()>500)
            {
               return true;
            }
         }
      }
      return false;
   }
}